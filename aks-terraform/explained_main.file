# Azure Provider Configuration: Establishes the connection to Azure using service principal credentials.
# This is the first step in any Azure-based Terraform configuration, essential for authenticating API calls.
# Syntax: Standard Terraform syntax for declaring providers with nested configurations for features and credentials.
# Use Cases: Any Terraform configuration that needs to provision resources in Azure.
# Importance: 5 - Without this, Terraform cannot manage resources in Azure.
# Connection to E-commerce and Azure CI/CD: In an e-commerce platform on Azure, this provider would be the bridge between Terraform and Azure, enabling infrastructure as code (IaC) deployment which is essential for reproducible and scalable environments. It integrates with Azure DevOps CI/CD pipelines to automate the deployment process.
# Alternative Values: Depending on the environment, credentials could be provided through environment variables instead of being declared directly in the configuration for enhanced security.
provider "azurerm" {
  features {} # This empty 'features' block is required by the AzureRM provider, although no features are specified.
  client_id       = var.client_id # Azure Service Principal Client ID, used for programmatic access to Azure.
  client_secret   = var.client_secret # Azure Service Principal Secret, used for authentication.
  subscription_id = var.subscription_id # Specifies which Azure subscription to use.
  tenant_id       = var.tenant_id # Azure Tenant ID, representing the organization in Azure.
}

# Networking Module Declaration: This module sets up the foundational network infrastructure.
# Syntax: Utilizes the Terraform module syntax to call upon a separate collection of Terraform configurations, encapsulated as a reusable module.
# Use Cases: Creates a virtual network and subnets required for an Azure Kubernetes Service (AKS) cluster, which could host an e-commerce platform's services.
# Importance: 5 - Network configuration is a prerequisite for deploying services that require interconnectivity and internet access.
# Connection to E-commerce and Azure CI/CD: For an e-commerce platform, the networking setup dictates the flow of traffic and can impact performance and security. It is a critical component that can be standardized and versioned in a CI/CD pipeline.
# Alternative Values: The module source could reference a different path or version tag if the module is versioned.
module "networking-module" {
  source = "./modules/networking-module" # Path to the networking module directory.

  resource_group_name = var.resource_group_name # Name of the resource group where network resources will reside.
  location            = var.location # Azure region for resource deployment, chosen based on proximity to customers.
  vnet_address_space  = var.vnet_address_space # IP address range for the virtual network, crucial for defining network scope and scale.
}

# AKS Cluster Module Declaration: Orchestrates the creation of the AKS cluster.
# Syntax: Follows the Terraform module syntax to modularize and encapsulate the AKS deployment.
# Use Cases: Sets up an AKS cluster which can be used to host containerized e-commerce applications, providing a scalable and managed Kubernetes environment.
# Importance: 5 - AKS is a managed Kubernetes service that abstracts away the complexity of Kubernetes cluster management, which is vital for the dynamic scaling needs of e-commerce platforms.
# Connection to E-commerce and Azure CI/CD: An AKS cluster can be part of a CI/CD pipeline to continuously deploy and manage e-commerce applications. It's crucial for microservices architectures common in modern e-commerce solutions.
# Alternative Values: The cluster configuration can vary based on needs; for instance, node sizes and counts can be adjusted for the workload.
module "aks-cluster-module" {
  source = "./modules/aks-cluster-module" # Path to the AKS cluster module directory.

  aks_cluster_name            = var.aks_cluster_name # Defines the AKS cluster name, which should be unique within an Azure region.
  cluster_location            = var.cluster_location # Specifies the location for AKS cluster creation, aligning with data sovereignty laws or proximity to users.
  dns_prefix                  = var.dns_prefix # Used to create the fully qualified domain name for the AKS cluster, affecting URL and network traffic routing.
  kubernetes_version          = var.kubernetes_version # Determines the Kubernetes version of the AKS cluster, affecting compatibility with Kubernetes workloads.
  resource_group_name         = var.resource_group_name # Resource group under which the AKS cluster will be provisioned, used for organizing and managing Azure resources.
  service_principal_client_id = var.service_principal_client_id # Service principal ID used by AKS to interact with Azure services like load balancers.
  service_principal_secret    = var.service_principal_secret # The secret for the service principal, which should be kept secure and private.
  # Networking Integration: The AKS cluster must be placed within a virtual network (VNet) for connectivity.
  # This establishes the AKS cluster in the context of the networking resources defined by the networking module.
  # Syntax: Demonstrates the inter-module dependency, where the output of one module (networking-module) is used as input for another.
  # Use Cases: Essential for scenarios where the AKS cluster needs to communicate with other resources within the same VNet, such as databases or other services within an e-commerce platform.
  # Importance: 5 - Correct networking setup is crucial for the security and proper operation of the AKS cluster, which could host customer-facing e-commerce applications.
  # Connection to E-commerce and Azure CI/CD: Tightly integrated with CI/CD pipelines that deploy both infrastructure and application updates, ensuring that the networking context is always aligned with the latest changes.
  # Alternative Values: If there are multiple VNets, the correct VNet ID must be provided to ensure the AKS cluster is associated with the intended network.
  vnet_id = module.networking-module.vnet_id # Acquires the VNet ID created by the networking module to associate the AKS cluster with it.

  # Subnet Integration: Specifies the subnets for the control plane and worker nodes of the AKS cluster.
  # This ensures that the AKS cluster components are appropriately placed in the network for security and organization.
  # Syntax: References outputs from the networking module to enforce modularity and reuse of the networking infrastructure.
  # Use Cases: The control plane subnet ID is used to host the Kubernetes control plane, while the worker node subnet ID is used for the nodes running the application pods.
  # Importance: 5 - Correct subnetting is vital for network security, traffic segregation, and potentially affects the scalability and performance of e-commerce services.
  # Connection to E-commerce and Azure CI/CD: Proper subnet setup allows for secure segmentation of traffic in an e-commerce platform and can be managed as part of an infrastructure pipeline for consistent deployments.
  # Alternative Values: These would change if you have a different networking setup, such as using an existing VNet or subnets.
  control_plane_subnet_id = module.networking-module.control_plane_subnet_id # The subnet ID for the AKS control plane.
  worker_node_subnet_id   = module.networking-module.worker_node_subnet_id # The subnet ID for the AKS worker nodes.
}